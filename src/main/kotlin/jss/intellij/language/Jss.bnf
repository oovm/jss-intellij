{
    parserClass = "jss.intellij.language.parser.JssParser"
    parserUtilClass = "jss.intellij.language.psi.JssParserUtil"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Jss"
    psiImplClassSuffix = "Node"
    psiPackage = "jss.intellij.language.psi"
    psiImplPackage = "jss.intellij.language.psi_node"

    elementTypeHolderClass = "jss.intellij.language.psi.JssTypes"
    elementTypeClass = "jss.intellij.language.psi.JssElementType"
    tokenTypeClass = "jss.intellij.language.psi.JssElementType"

    psiImplUtilClass = "jss.intellij.language.mixin.NodeExtension"
    generateTokenAccessors = false

    tokens = [
        // comment
        COMMENT_DOCUMENT = 'DocumentComment'
        COMMENT = 'DocumentInline'
        COMMENT_BLOCK = 'DocumentBlock'
        // literal
        URL = 'Url'
        SYMBOL = 'Symbol'
        STRING = 'String'
        BYTE = 'Byte'
        INTEGER = 'Integer'
        DECIMAL = 'Decimal'
        SIGN = 'regexp:[+-]'

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
    ]
}

JSS ::= statement*;

private statement ::=
    schema_statement
  | properties_statement
  | def_statement
//  | COMMENT_DOCUMENT
  | object
  | ignore;
private ignore ::= SEMICOLON | COMMA;
// ---------------------------------------------------------------------------------------------------------------------
// schema <ID>: <TYPE> { }
schema_statement ::= schema identifier [type_hint] schema_block {
    mixin = "jss.intellij.language.mixin.MixinSchema"
};
private schema_block ::= <<brace_block properties_inner ignore>>
schema ::= "schema"
// ---------------------------------------------------------------------------------------------------------------------
// properties <ID>: <TYPE> { }
properties_statement ::= property key [type_hint] [properties_block] {
    mixin = "jss.intellij.language.mixin.MixinProperty"
};
property ::= "properties" | "property" | "prop" | "field" | DOT;
private properties_block ::= <<brace_block properties_inner ignore>>;
private properties_inner ::=
    idiom_statement
  | properties_statement
  | anno_statement
  | kv_pair // consider as anno
  ;
// ---------------------------------------------------------------------------------------------------------------------
def_statement ::= ("def"|"define"|"definition") key [type_hint] [properties_block];
// ---------------------------------------------------------------------------------------------------------------------
// $schema: https://json-schema.org/draft/2020-12/schema
idiom_statement ::= idiom_mark identifier [COLON] value {
    mixin = "jss.intellij.language.mixin.MixinIdiom"
};
idiom_mark ::= DOLLAR;
// ---------------------------------------------------------------------------------------------------------------------
// <KEY>: <VALUE>
anno_statement ::= key set value {
    mixin = "jss.intellij.language.mixin.MixinAnnotation"
};
// ---------------------------------------------------------------------------------------------------------------------
kv_pair ::= key set value;
key ::= RAW_STRING_1|RAW_STRING_2 | SYMBOL {
    mixin = "jss.intellij.language.mixin.MixinKey"
};
// ---------------------------------------------------------------------------------------------------------------------
value ::= null | boolean | num | string | array | object | url_maybe_valid {
    mixin = "jss.intellij.language.mixin.MixinValue"
};
null ::= "null";
boolean ::= "true" | "false";
// used in annotation
url_maybe_valid ::= URL;
// ---------------------------------------------------------------------------------------------------------------------
type_hint ::= COLON type_symbol;
private type_symbol ::= SYMBOL | STRING;
// ---------------------------------------------------------------------------------------------------------------------
set ::= EQ | COLON;
// ---------------------------------------------------------------------------------------------------------------------
private num ::= [SIGN] (INTEGER | DECIMAL) | [SIGN] BYTE;
// ---------------------------------------------------------------------------------------------------------------------
string ::= (RAW_STRING_1|RAW_STRING_2|RAW_STRING_3) {
    mixin = "jss.intellij.language.mixin.MixinString"
}
// ---------------------------------------------------------------------------------------------------------------------
array ::= <<bracket_block value ignore>> {
    mixin = "jss.intellij.language.mixin.MixinArray"
};
object ::= <<brace_block kv_pair ignore>>;
// ---------------------------------------------------------------------------------------------------------------------
namespace ::= identifier (DOT identifier)*;
identifier ::= SYMBOL;
// ---------------------------------------------------------------------------------------------------------------------
// parenthesis ( )
private meta parenthesis ::= PARENTHESIS_L <<param>> PARENTHESIS_R;
// bracket [ ]
meta bracket_block ::= BRACKET_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] BRACKET_R;
// brace { }
meta brace_block ::=BRACE_L (<<item>>|<<sp>>)* BRACE_R;

