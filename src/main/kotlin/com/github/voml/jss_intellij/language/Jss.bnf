{
    parserClass = "com.github.voml.jss_intellij.language.parser.JssParser"
    parserUtilClass = "com.github.voml.jss_intellij.language.psi.JssParserUtil"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Jss"
    psiImplClassSuffix = "Impl"
    psiPackage = "com.github.voml.jss_intellij.language.psi"
    psiImplPackage = "com.github.voml.jss_intellij.language.psi.impl"

    elementTypeHolderClass = "com.github.voml.jss_intellij.language.psi.JssTypes"
    elementTypeClass = "com.github.voml.jss_intellij.language.psi.JssElementType"
    tokenTypeClass = "com.github.voml.jss_intellij.language.psi.JssTokenType"

    psiImplUtilClass = "com.github.voml.jss_intellij.language.psi.impl.JssPsiImplUtil"

    tokens = [
        // comment
        COMMENT_DOCUMENT = 'regexp:(///)[^\r\n]*'
        COMMENT = 'regexp:(//)[^\r\n]*'
        COMMENT_BLOCK = 'regexp:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]'

        // literal
        URL = 'regexp: [A-Za-z0-9]+://[\-\p{XID_Continue}./?&#]+'
        SYMBOL = 'regexp:[\p{XID_Start}_][\p{XID_Continue}_]*'
        STRING = 'regexp:"([^"\\]|\\.)*"'

        BYTE = 'regexp:(0[bBoOxXfF][0-9A-Fa-f][0-9A-Fa-f_]*)'
        INTEGER = 'regexp:(0|[1-9][0-9_]*)'
        DECIMAL = 'regexp:([0-9]+\.[0-9]*([*][*][0-9]+)?)|(\.[0-9]+([Ee][0-9]+)?)'
        SIGN = 'regexp:[+-]'

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ACCENT = '^'
        ANGLE_L = '<'
        ANGLE_R = '>'
        QUOTATION = '"'
        ESCAPE = '\'
        NON_ESCAPE = 'regexp:[^\\]'
        EQ = '='
        NAN = "nan"
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'
    ]
}

Jss ::= statement*;

private statement ::=
    schema_statement
  | properties_statement
  | def_statement
  | COMMENT_DOCUMENT
  | ignore;
private ignore ::= SEMICOLON | COMMA;
// ---------------------------------------------------------------------------------------------------------------------
// schema <ID>: <TYPE> { }
schema_statement ::= "schema" SYMBOL type_hint <<brace properties_inner*>>;
// ---------------------------------------------------------------------------------------------------------------------
// properties <ID>: <TYPE> { }
properties_statement ::= ("properties"|properties_mark) properties_ley type_hint [properties_block];
properties_mark ::= DOT;
properties_block ::= <<brace properties_inner*>>;
properties_ley ::= STRING | SYMBOL;
private properties_inner ::=
    idiom_statement
  | properties_statement
  | anno_statement
  | ignore;
// ---------------------------------------------------------------------------------------------------------------------
// $schema: https://json-schema.org/draft/2020-12/schema
idiom_statement ::= idiom_mark idiom_symbol [COLON] value;
idiom_mark ::= DOLLAR;
idiom_symbol ::= SYMBOL;
// ---------------------------------------------------------------------------------------------------------------------
// <KEY>: <VALUE>
anno_statement ::= anno_key set value;
private set ::= COLON;
private anno_key ::= STRING | SYMBOL;
// -------------------------------G-----
def_statement ::= DEFINE SYMBOL (AS key_symbol | <<paired include_inner>>);
private include_inner ::= key_symbol*;
// -------------------------------G-----
private type_hint ::= COLON type_symbol;
type_symbol ::= SYMBOL;
// ------------------------------------
pair ::= symbol_path eq value;
symbol_path ::= key (DOT key)*;
private key ::= string_inline | key_symbol | INTEGER;
private eq ::= EQ | COLON;
key_symbol ::= SYMBOL;
// ------------------------------------
value ::= null | boolean | num | ref | str | table | url_maybe_valid;
null ::= "null";
boolean ::= "true" | "false";
url_maybe_valid ::= URL;
// ------------------------------------
private num ::= [SIGN] (INTEGER | DECIMAL) | [SIGN] BYTE | other_num;
private other_num ::= NAN;
// ------------------------------------
private str ::= (string_inline|string_multi);
string_inline ::= STRING;
string_multi ::= QUOTATION char* QUOTATION;
private char ::= escaped | NON_ESCAPE;
escaped ::= ESCAPE (ESCAPE|NON_ESCAPE);
// ------------------------------------
ref ::= CITE symbol_path;
// ------------------------------------
//annotation ::= annotation_mark [COLON] <<paired table_inner>>;
//annotation_mark ::= DOLLAR SYMBOL;
// ------------------------------------
table ::= [type_hint] <<paired table_inner>>;
private table_inner ::= [table_item (COMMA table_item)* [COMMA]];
private table_item ::= pair | value;
// ------------------------------------
meta paired ::=
    PARENTHESIS_L <<param>> PARENTHESIS_R
  | BRACKET_L <<param>> BRACKET_R
  | BRACE_L <<param>> BRACE_R
private meta parenthesis ::= PARENTHESIS_L <<param>> PARENTHESIS_R;
private meta bracket ::= BRACKET_L <<param>> BRACKET_R;
private meta brace ::= BRACE_L <<param>> BRACE_R;

